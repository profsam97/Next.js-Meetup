{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"C:\\\\Users\\\\proft\\\\OneDrive\\\\Documents\\\\react\\\\Next.js\\\\Next.jsChap23part2\\\\pages\\\\[meetupId]\\\\index.js\";\nimport { MongoClient, ObjectId } from \"mongodb\";\n\nfunction Meetup(props) {\n  return /*#__PURE__*/_jsxDEV(MeetupDetails, {\n    title: props.meetupData.title,\n    image: props.meetupData.image,\n    address: props.meetupData.address,\n    description: props.meetupData.description\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 4,\n    columnNumber: 12\n  }, this);\n}\n\nexport async function getStaticPaths() {\n  const client = await MongoClient.connect('mongodb+srv://samuel:TxxzfTXdwqJfCClt@cluster0.ic6ns.mongodb.net/meetups?retryWrites=true&w=majority');\n  const db = client.db();\n  const MeetupsCollections = db.collection('meetups');\n  const meetups = await MeetupsCollections.find({}, {\n    _id: 1\n  }).toArray();\n  client.close();\n  return {\n    fallback: false,\n    paths: meetups.map(meetup => ({\n      params: {\n        meetupId: meetup._id.toString()\n      }\n    }))\n  };\n}\nexport async function getStaticProps(context) {\n  const meetupId = context.params.meetupId;\n  const client = await MongoClient.connect('mongodb+srv://samuel:TxxzfTXdwqJfCClt@cluster0.ic6ns.mongodb.net/meetups?retryWrites=true&w=majority');\n  const db = client.db();\n  const meetupCollection = db.collection('meetups');\n  const meetup = await meetupCollection.findOne({\n    _id: ObjectId(meetupId)\n  });\n  client.close();\n  return {\n    props: {\n      meetupData: {\n        image: meetup.image,\n        id: meetup._id.toString(),\n        address: meetup.address,\n        description: meetup.description,\n        title: meetup.title\n      }\n    }\n  };\n}\nexport default Meetup;","map":{"version":3,"sources":["C:/Users/proft/OneDrive/Documents/react/Next.js/Next.jsChap23part2/pages/[meetupId]/index.js"],"names":["MongoClient","ObjectId","Meetup","props","meetupData","title","image","address","description","getStaticPaths","client","connect","db","MeetupsCollections","collection","meetups","find","_id","toArray","close","fallback","paths","map","meetup","params","meetupId","toString","getStaticProps","context","meetupCollection","findOne","id"],"mappings":";;AAAA,SAASA,WAAT,EAAsBC,QAAtB,QAAsC,SAAtC;;AAEA,SAASC,MAAT,CAAgBC,KAAhB,EAAsB;AACpB,sBAAS,QAAC,aAAD;AAAgB,IAAA,KAAK,EAAEA,KAAK,CAACC,UAAN,CAAiBC,KAAxC;AACH,IAAA,KAAK,EAAIF,KAAK,CAACC,UAAN,CAAiBE,KADvB;AAEH,IAAA,OAAO,EAAIH,KAAK,CAACC,UAAN,CAAiBG,OAFzB;AAGH,IAAA,WAAW,EAAIJ,KAAK,CAACC,UAAN,CAAiBI;AAH7B;AAAA;AAAA;AAAA;AAAA,UAAT;AAID;;AAED,OAAO,eAAeC,cAAf,GAA+B;AACnC,QAAMC,MAAM,GAAG,MAAMV,WAAW,CAACW,OAAZ,CAAoB,sGAApB,CAArB;AACK,QAAMC,EAAE,GAAGF,MAAM,CAACE,EAAP,EAAX;AACA,QAAMC,kBAAkB,GAAGD,EAAE,CAACE,UAAH,CAAc,SAAd,CAA3B;AACA,QAAMC,OAAO,GAAG,MAAMF,kBAAkB,CAACG,IAAnB,CAAwB,EAAxB,EAA4B;AAACC,IAAAA,GAAG,EAAE;AAAN,GAA5B,EAAsCC,OAAtC,EAAtB;AACAR,EAAAA,MAAM,CAACS,KAAP;AACN,SAAO;AACLC,IAAAA,QAAQ,EAAE,KADL;AAELC,IAAAA,KAAK,EAAIN,OAAO,CAACO,GAAR,CAAYC,MAAM,KAAI;AAACC,MAAAA,MAAM,EAAE;AAACC,QAAAA,QAAQ,EAAEF,MAAM,CAACN,GAAP,CAAWS,QAAX;AAAX;AAAT,KAAJ,CAAlB;AAFJ,GAAP;AAID;AACD,OAAO,eAAeC,cAAf,CAA8BC,OAA9B,EAAsC;AACzC,QAAMH,QAAQ,GAAGG,OAAO,CAACJ,MAAR,CAAeC,QAAhC;AACF,QAAMf,MAAM,GAAG,MAAMV,WAAW,CAACW,OAAZ,CAAoB,sGAApB,CAArB;AACA,QAAMC,EAAE,GAAGF,MAAM,CAACE,EAAP,EAAX;AACA,QAAMiB,gBAAgB,GAAGjB,EAAE,CAACE,UAAH,CAAc,SAAd,CAAzB;AACA,QAAMS,MAAM,GAAG,MAAMM,gBAAgB,CAACC,OAAjB,CAAyB;AAACb,IAAAA,GAAG,EAAEhB,QAAQ,CAACwB,QAAD;AAAd,GAAzB,CAArB;AACAf,EAAAA,MAAM,CAACS,KAAP;AACA,SAAO;AACLhB,IAAAA,KAAK,EAAE;AACLC,MAAAA,UAAU,EAAE;AACVE,QAAAA,KAAK,EAAGiB,MAAM,CAACjB,KADL;AAEVyB,QAAAA,EAAE,EAAER,MAAM,CAACN,GAAP,CAAWS,QAAX,EAFM;AAGVnB,QAAAA,OAAO,EAAEgB,MAAM,CAAChB,OAHN;AAIVC,QAAAA,WAAW,EAAEe,MAAM,CAACf,WAJV;AAKVH,QAAAA,KAAK,EAAGkB,MAAM,CAAClB;AALL;AADP;AADF,GAAP;AAWD;AACD,eAAeH,MAAf","sourcesContent":["import { MongoClient, ObjectId } from \"mongodb\";\r\n\r\nfunction Meetup(props){\r\n  return   <MeetupDetails  title={props.meetupData.title}\r\n        image = {props.meetupData.image}\r\n        address = {props.meetupData.address}\r\n        description=  {props.meetupData.description}/>\r\n}\r\n\r\nexport async function getStaticPaths(){\r\n   const client = await MongoClient.connect('mongodb+srv://samuel:TxxzfTXdwqJfCClt@cluster0.ic6ns.mongodb.net/meetups?retryWrites=true&w=majority');\r\n        const db = client.db();\r\n        const MeetupsCollections = db.collection('meetups');\r\n        const meetups = await MeetupsCollections.find({}, {_id: 1}).toArray();\r\n        client.close()\r\n  return {\r\n    fallback: false,\r\n    paths :  meetups.map(meetup =>({params: {meetupId: meetup._id.toString()},}))\r\n  }\r\n}\r\nexport async function getStaticProps(context){\r\n    const meetupId = context.params.meetupId;\r\n  const client = await MongoClient.connect('mongodb+srv://samuel:TxxzfTXdwqJfCClt@cluster0.ic6ns.mongodb.net/meetups?retryWrites=true&w=majority');\r\n  const db = client.db();\r\n  const meetupCollection = db.collection('meetups');\r\n  const meetup = await meetupCollection.findOne({_id: ObjectId(meetupId), })\r\n  client.close()\r\n  return {\r\n    props: {\r\n      meetupData: {\r\n        image : meetup.image,\r\n        id: meetup._id.toString(),\r\n        address: meetup.address,\r\n        description: meetup.description,\r\n        title : meetup.title\r\n      }\r\n    }\r\n  }\r\n}\r\nexport default Meetup;\r\n"]},"metadata":{},"sourceType":"module"}